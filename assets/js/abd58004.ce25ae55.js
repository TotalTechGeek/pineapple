"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7718],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=u(r),f=i,d=h["".concat(c,".").concat(f)]||h[f]||p[f]||o;return r?n.createElement(d,a(a({ref:t},l),{},{components:r})):n.createElement(d,a({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1108:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(7462),i=(r(7294),r(3905));const o={sidebar_position:2},a="Higher Order Functions",s={unversionedId:"writing-tests/higher-order-functions",id:"writing-tests/higher-order-functions",title:"Higher Order Functions",description:"If you have a particular case where a you wish to test a function that returns a function (perhaps through currying or just as a natural API Design choice), Pineapple can handle that inline as well!",source:"@site/docs/writing-tests/higher-order-functions.md",sourceDirName:"writing-tests",slug:"/writing-tests/higher-order-functions",permalink:"/pineapple/docs/writing-tests/higher-order-functions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/writing-tests/higher-order-functions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"The Basics",permalink:"/pineapple/docs/writing-tests/the-basics"},next:{title:"Fuzz Testing",permalink:"/pineapple/docs/writing-tests/fuzzing-property-based"}},c={},u=[],l={toc:u};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"higher-order-functions"},"Higher Order Functions"),(0,i.kt)("p",null,"If you have a particular case where a you wish to test a function that returns a function (perhaps through currying or just as a natural API Design choice), Pineapple can handle that inline as well!"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"~>")," after a test declaration will allow you to chain it to another test declaration,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @test 3 ~> 'Hello' returns falsy\n * @test 10 ~> 'Hello' returns truthy\n */\nfunction min (num = 1) {\n    return str => str.length < min ? 'The string is too short' : ''\n}\n\n/**\n *  @test 1 ~> 5 ~> 3 returns 9\n */\nconst threeAdd = a => b => c => a + b + c\n")),(0,i.kt)("p",null,"If, however, you wish to test a function that accepts a function as a parameter, you may wish to proceed to the next step in the tutorial."))}p.isMDXComponent=!0}}]);