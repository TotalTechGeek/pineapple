"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2745],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,g=m["".concat(s,".").concat(f)]||m[f]||c[f]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3736:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={tags:["v0.9.1","patch","minor"],sidebar_position:5,date:new Date("2022-09-13T00:00:00.000Z"),authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png"}]},s="Improving Property Based Testing (v0.9.1)",p={permalink:"/pineapple/blog/v0.9.1",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.9.1.md",source:"@site/blog/v0.9.1.md",title:"Improving Property Based Testing (v0.9.1)",description:"Hi all!",date:"2022-09-13T00:00:00.000Z",formattedDate:"September 13, 2022",tags:[{label:"v0.9.1",permalink:"/pineapple/blog/tags/v-0-9-1"},{label:"patch",permalink:"/pineapple/blog/tags/patch"},{label:"minor",permalink:"/pineapple/blog/tags/minor"}],readingTime:1.6,truncated:!1,authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png",imageURL:"https://github.com/TotalTechGeek.png"}],frontMatter:{tags:["v0.9.1","patch","minor"],sidebar_position:5,date:"2022-09-13T00:00:00.000Z",authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png",imageURL:"https://github.com/TotalTechGeek.png"}]},nextItem:{title:"Supercharging Pineapple with Property Based Testing (v0.9.0)",permalink:"/pineapple/blog/v0.9.0"}},u={authorsImageUrls:[void 0]},c=[{value:"Namespaces",id:"namespaces",level:4},{value:"Better Constant Detection",id:"better-constant-detection",level:4}],m={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Hi all!"),(0,o.kt)("p",null,"This release is focused on providing some small quality of life improvements to the property-based testing features within Pineapple."),(0,o.kt)("p",null,"There are two main additions to the technology:"),(0,o.kt)("h4",{id:"namespaces"},"Namespaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Creates the static values for use in various scenarios in our codebase.\n * @pineapple_define friends\n */\nfunction define () {\n  return {\n    kevin: { /* ... */ },\n    shane: { /* ... */ },\n    emily: { /* ... */ }\n  }\n}\n\n/**\n * #friends.emily, #friends.shane returns 'Battle won!'\n * #friends.shane, #friends.kevin returns 'Battle draw!'\n */\nfunction fight (attacker, defender) {\n  /* ... */\n}\n")),(0,o.kt)("p",null,"Namespaces might make it simpler to set up various generators & static values that you might wish to use throughout your tests."),(0,o.kt)("h4",{id:"better-constant-detection"},"Better Constant Detection"),(0,o.kt)("p",null,'When you set up definitions in Pineapple, the testing framework will do its best to try to keep track of whether your "arbitrary expression" is actually constant.'),(0,o.kt)("p",null,"This prevents a bunch of duplicate tests from taking place, particularly when it would be annoying (like in snapshots)."),(0,o.kt)("p",null,"Previously, when one would try the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @pineapple_define\n */\nfunction define () {\n  return { age: 17 }\n}\n\n/**\n * @test { name: 'Kevin', age: #age }\n * The above would not be detected as static in v0.9.0,\n * but will be in v0.9.1\n */\nfunction setupAccount({ name, age }) {\n  /* ... */\n}\n\n/**\n * @test #age returns false\n * The above will be detected as constant in both v0.9.0 and v0.9.1\n */\nfunction isAmericanDrinkingAge (age) {\n  return age >= 21\n}\n")),(0,o.kt)("p",null,"Pineapple would not be able to detect that the expression ",(0,o.kt)("inlineCode",{parentName:"p"},"{ name: 'Kevin', age: #age }")," was actually a constant expression. However, if you used ",(0,o.kt)("inlineCode",{parentName:"p"},"#age"),"\noutside of a structure as seen in the second example, it would work!"),(0,o.kt)("p",null,"To make developer's lives easier, Pineapple has been improved to try to do a better job of detecting\nconstant structures."))}f.isMDXComponent=!0}}]);