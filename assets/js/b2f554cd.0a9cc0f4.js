"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/v0.12.0","metadata":{"permalink":"/blog/v0.12.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.12.0.md","source":"@site/blog/v0.12.0.md","title":"Bun Support and Continuous Testing (v0.12.0)","description":"Hey there!","date":"2022-11-19T00:00:00.000Z","formattedDate":"November 19, 2022","tags":[{"label":"v0.12.0","permalink":"/blog/tags/v-0-12-0"},{"label":"patch","permalink":"/blog/tags/patch"},{"label":"major","permalink":"/blog/tags/major"}],"readingTime":1.455,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.12.0","patch","major"],"sidebar_position":7,"date":"2022-11-19T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"nextItem":{"title":"Improving Snapshots & User Output (v0.10.0)","permalink":"/blog/v0.10.0"}},"content":"Hey there!\\n\\nThis release introduces significant improvements to Pineapple to make development & testing a better experience for all.\\n\\n## Support for Bun\\n\\n<a href=\\"https://bun.sh\\"><img title=\\"The Bun Logo, which looks like a chinese dumpling with a smiley face.\\" src=\\"data:image/svg+xml;base64, PHN2ZyBpZD0iQnVuIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA4MCA3MCI+PHRpdGxlPkJ1biBMb2dvPC90aXRsZT48cGF0aCBpZD0iU2hhZG93IiBkPSJNNzEuMDksMjAuNzRjLS4xNi0uMTctLjMzLS4zNC0uNS0uNXMtLjMzLS4zNC0uNS0uNS0uMzMtLjM0LS41LS41LS4zMy0uMzQtLjUtLjUtLjMzLS4zNC0uNS0uNS0uMzMtLjM0LS41LS41LS4zMy0uMzQtLjUtLjVBMjYuNDYsMjYuNDYsMCwwLDEsNzUuNSwzNS43YzAsMTYuNTctMTYuODIsMzAuMDUtMzcuNSwzMC4wNS0xMS41OCwwLTIxLjk0LTQuMjMtMjguODMtMTAuODZsLjUuNS41LjUuNS41LjUuNS41LjUuNS41LjUuNUMxOS41NSw2NS4zLDMwLjE0LDY5Ljc1LDQyLDY5Ljc1YzIwLjY4LDAsMzcuNS0xMy40OCwzNy41LTMwQzc5LjUsMzIuNjksNzYuNDYsMjYsNzEuMDksMjAuNzRaIi8+PGcgaWQ9IkJvZHkiPjxwYXRoIGlkPSJCYWNrZ3JvdW5kIiBkPSJNNzMsMzUuN2MwLDE1LjIxLTE1LjY3LDI3LjU0LTM1LDI3LjU0UzMsNTAuOTEsMywzNS43QzMsMjYuMjcsOSwxNy45NCwxOC4yMiwxM1MzMy4xOCwzLDM4LDNzOC45NCw0LjEzLDE5Ljc4LDEwQzY3LDE3Ljk0LDczLDI2LjI3LDczLDM1LjdaIiBzdHlsZT0iZmlsbDojZmJmMGRmIi8+PHBhdGggaWQ9IkJvdHRvbV9TaGFkb3ciIGRhdGEtbmFtZT0iQm90dG9tIFNoYWRvdyIgZD0iTTczLDM1LjdhMjEuNjcsMjEuNjcsMCwwLDAtLjgtNS43OGMtMi43MywzMy4zLTQzLjM1LDM0LjktNTkuMzIsMjQuOTRBNDAsNDAsMCwwLDAsMzgsNjMuMjRDNTcuMyw2My4yNCw3Myw1MC44OSw3MywzNS43WiIgc3R5bGU9ImZpbGw6I2Y2ZGVjZSIvPjxwYXRoIGlkPSJMaWdodF9TaGluZSIgZGF0YS1uYW1lPSJMaWdodCBTaGluZSIgZD0iTTI0LjUzLDExLjE3QzI5LDguNDksMzQuOTQsMy40Niw0MC43OCwzLjQ1QTkuMjksOS4yOSwwLDAsMCwzOCwzYy0yLjQyLDAtNSwxLjI1LTguMjUsMy4xMy0xLjEzLjY2LTIuMywxLjM5LTMuNTQsMi4xNS0yLjMzLDEuNDQtNSwzLjA3LTgsNC43QzguNjksMTguMTMsMywyNi42MiwzLDM1LjdjMCwuNCwwLC44LDAsMS4xOUM5LjA2LDE1LjQ4LDIwLjA3LDEzLjg1LDI0LjUzLDExLjE3WiIgc3R5bGU9ImZpbGw6I2ZmZmVmYyIvPjxwYXRoIGlkPSJUb3AiIGQ9Ik0zNS4xMiw1LjUzQTE2LjQxLDE2LjQxLDAsMCwxLDI5LjQ5LDE4Yy0uMjguMjUtLjA2LjczLjMuNTksMy4zNy0xLjMxLDcuOTItNS4yMyw2LTEzLjE0QzM1LjcxLDUsMzUuMTIsNS4xMiwzNS4xMiw1LjUzWm0yLjI3LDBBMTYuMjQsMTYuMjQsMCwwLDEsMzksMTljLS4xMi4zNS4zMS42NS41NS4zNkM0MS43NCwxNi41Niw0My42NSwxMSwzNy45Myw1LDM3LjY0LDQuNzQsMzcuMTksNS4xNCwzNy4zOSw1LjQ5Wm0yLjc2LS4xN0ExNi40MiwxNi40MiwwLDAsMSw0NywxNy4xMmEuMzMuMzMsMCwwLDAsLjY1LjExYy45Mi0zLjQ5LjQtOS40NC03LjE3LTEyLjUzQzQwLjA4LDQuNTQsMzkuODIsNS4wOCw0MC4xNSw1LjMyWk0yMS42OSwxNS43NmExNi45NCwxNi45NCwwLDAsMCwxMC40Ny05Yy4xOC0uMzYuNzUtLjIyLjY2LjE4LTEuNzMsOC03LjUyLDkuNjctMTEuMTIsOS40NUMyMS4zMiwxNi40LDIxLjMzLDE1Ljg3LDIxLjY5LDE1Ljc2WiIgc3R5bGU9ImZpbGw6I2NjYmVhNztmaWxsLXJ1bGU6ZXZlbm9kZCIvPjxwYXRoIGlkPSJPdXRsaW5lIiBkPSJNMzgsNjUuNzVDMTcuMzIsNjUuNzUuNSw1Mi4yNy41LDM1LjdjMC0xMCw2LjE4LTE5LjMzLDE2LjUzLTI0LjkyLDMtMS42LDUuNTctMy4yMSw3Ljg2LTQuNjIsMS4yNi0uNzgsMi40NS0xLjUxLDMuNi0yLjE5QzMyLDEuODksMzUsLjUsMzgsLjVzNS42MiwxLjIsOC45LDMuMTRjMSwuNTcsMiwxLjE5LDMuMDcsMS44NywyLjQ5LDEuNTQsNS4zLDMuMjgsOSw1LjI3QzY5LjMyLDE2LjM3LDc1LjUsMjUuNjksNzUuNSwzNS43LDc1LjUsNTIuMjcsNTguNjgsNjUuNzUsMzgsNjUuNzVaTTM4LDNjLTIuNDIsMC01LDEuMjUtOC4yNSwzLjEzLTEuMTMuNjYtMi4zLDEuMzktMy41NCwyLjE1LTIuMzMsMS40NC01LDMuMDctOCw0LjdDOC42OSwxOC4xMywzLDI2LjYyLDMsMzUuNywzLDUwLjg5LDE4LjcsNjMuMjUsMzgsNjMuMjVTNzMsNTAuODksNzMsMzUuN0M3MywyNi42Miw2Ny4zMSwxOC4xMyw1Ny43OCwxMyw1NCwxMSw1MS4wNSw5LjEyLDQ4LjY2LDcuNjRjLTEuMDktLjY3LTIuMDktMS4yOS0zLTEuODRDNDIuNjMsNCw0MC40MiwzLDM4LDNaIi8+PC9nPjxnIGlkPSJNb3V0aCI+PGcgaWQ9IkJhY2tncm91bmQtMiIgZGF0YS1uYW1lPSJCYWNrZ3JvdW5kIj48cGF0aCBkPSJNNDUuMDUsNDNhOC45Myw4LjkzLDAsMCwxLTIuOTIsNC43MSw2LjgxLDYuODEsMCwwLDEtNCwxLjg4QTYuODQsNi44NCwwLDAsMSwzNCw0Ny43MSw4LjkzLDguOTMsMCwwLDEsMzEuMTIsNDNhLjcyLjcyLDAsMCwxLC44LS44MUg0NC4yNkEuNzIuNzIsMCwwLDEsNDUuMDUsNDNaIiBzdHlsZT0iZmlsbDojYjcxNDIyIi8+PC9nPjxnIGlkPSJUb25ndWUiPjxwYXRoIGlkPSJCYWNrZ3JvdW5kLTMiIGRhdGEtbmFtZT0iQmFja2dyb3VuZCIgZD0iTTM0LDQ3Ljc5YTYuOTEsNi45MSwwLDAsMCw0LjEyLDEuOSw2LjkxLDYuOTEsMCwwLDAsNC4xMS0xLjksMTAuNjMsMTAuNjMsMCwwLDAsMS0xLjA3LDYuODMsNi44MywwLDAsMC00LjktMi4zMSw2LjE1LDYuMTUsMCwwLDAtNSwyLjc4QzMzLjU2LDQ3LjQsMzMuNzYsNDcuNiwzNCw0Ny43OVoiIHN0eWxlPSJmaWxsOiNmZjYxNjQiLz48cGF0aCBpZD0iT3V0bGluZS0yIiBkYXRhLW5hbWU9Ik91dGxpbmUiIGQ9Ik0zNC4xNiw0N2E1LjM2LDUuMzYsMCwwLDEsNC4xOS0yLjA4LDYsNiwwLDAsMSw0LDEuNjljLjIzLS4yNS40NS0uNTEuNjYtLjc3YTcsNywwLDAsMC00LjcxLTEuOTMsNi4zNiw2LjM2LDAsMCwwLTQuODksMi4zNkE5LjUzLDkuNTMsMCwwLDAsMzQuMTYsNDdaIi8+PC9nPjxwYXRoIGlkPSJPdXRsaW5lLTMiIGRhdGEtbmFtZT0iT3V0bGluZSIgZD0iTTM4LjA5LDUwLjE5YTcuNDIsNy40MiwwLDAsMS00LjQ1LTIsOS41Miw5LjUyLDAsMCwxLTMuMTEtNS4wNSwxLjIsMS4yLDAsMCwxLC4yNi0xLDEuNDEsMS40MSwwLDAsMSwxLjEzLS41MUg0NC4yNmExLjQ0LDEuNDQsMCwwLDEsMS4xMy41MSwxLjE5LDEuMTksMCwwLDEsLjI1LDFoMGE5LjUyLDkuNTIsMCwwLDEtMy4xMSw1LjA1QTcuNDIsNy40MiwwLDAsMSwzOC4wOSw1MC4xOVptLTYuMTctNy40Yy0uMTYsMC0uMi4wNy0uMjEuMDlhOC4yOSw4LjI5LDAsMCwwLDIuNzMsNC4zN0E2LjIzLDYuMjMsMCwwLDAsMzguMDksNDlhNi4yOCw2LjI4LDAsMCwwLDMuNjUtMS43Myw4LjMsOC4zLDAsMCwwLDIuNzItNC4zNy4yMS4yMSwwLDAsMC0uMi0uMDlaIi8+PC9nPjxnIGlkPSJGYWNlIj48ZWxsaXBzZSBpZD0iUmlnaHRfQmx1c2giIGRhdGEtbmFtZT0iUmlnaHQgQmx1c2giIGN4PSI1My4yMiIgY3k9IjQwLjE4IiByeD0iNS44NSIgcnk9IjMuNDQiIHN0eWxlPSJmaWxsOiNmZWJiZDAiLz48ZWxsaXBzZSBpZD0iTGVmdF9CbHVjaCIgZGF0YS1uYW1lPSJMZWZ0IEJsdWNoIiBjeD0iMjIuOTUiIGN5PSI0MC4xOCIgcng9IjUuODUiIHJ5PSIzLjQ0IiBzdHlsZT0iZmlsbDojZmViYmQwIi8+PHBhdGggaWQ9IkV5ZXMiIGQ9Ik0yNS43LDM4LjhhNS41MSw1LjUxLDAsMSwwLTUuNS01LjUxQTUuNTEsNS41MSwwLDAsMCwyNS43LDM4LjhabTI0Ljc3LDBBNS41MSw1LjUxLDAsMSwwLDQ1LDMzLjI5LDUuNSw1LjUsMCwwLDAsNTAuNDcsMzguOFoiIHN0eWxlPSJmaWxsLXJ1bGU6ZXZlbm9kZCIvPjxwYXRoIGlkPSJJcmlzIiBkPSJNMjQsMzMuNjRhMi4wNywyLjA3LDAsMSwwLTIuMDYtMi4wN0EyLjA3LDIuMDcsMCwwLDAsMjQsMzMuNjRabTI0Ljc3LDBhMi4wNywyLjA3LDAsMSwwLTIuMDYtMi4wN0EyLjA3LDIuMDcsMCwwLDAsNDguNzUsMzMuNjRaIiBzdHlsZT0iZmlsbDojZmZmO2ZpbGwtcnVsZTpldmVub2RkIi8+PC9nPjwvc3ZnPg==\\" width=\\"25%\\" /></a>\\n\\nPineapple\'s internals have been reworked to make it possible to use Bun as the test runner, which has some significant advantages:\\n\\n- It transpiles every file for you, making it simpler to test your TypeScript, JSX and Flow projects.\\n- Runs on a modified version of JavaScriptCore, which in some cases runs faster than V8.\\n- Has a quicker cold-start time, which is useful for continuous testing.\\n\\nIf you pass in the `--bun` flag while invoking Pineapple, the framework will opt to use it over the traditional Node.js  runner.\\n\\n**Caveat Emptor**: If you\'re testing projects that depend heavily on Node-specific APIs, Bun may not be the ideal runner for your use-case.\\n\\n## Continuous Testing\\n\\nPrior to this release, Pineapple was a one-shot test runner; you\'d invoke the program & it\'d spit out test results.\\n\\nWhile it was certainly possible to pair Pineapple with nodemon or chokidar CLI, this would likely run every test in your project, rather than *just* the ones you were affecting.\\n\\nUsing the `--watch-mode` or `-w` flag, you can run Pineapple in continuous testing mode, which will only run tests that could be impacted by your modifications. The runner will traverse the dependency chain & deduce which tests in files downstream need to be run.\\n\\n<img alt=\\"An example of the snapshot functionality where the code is modified and the snapshot fails due to a renamed attribute\\" src=\\"/pineapple/img/continuous.png\\" width=\\"50%\\" />\\n\\n## Video\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/fbtTFq53Kgo\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"/v0.10.0","metadata":{"permalink":"/blog/v0.10.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.10.0.md","source":"@site/blog/v0.10.0.md","title":"Improving Snapshots & User Output (v0.10.0)","description":"Hey everyone!","date":"2022-10-18T00:00:00.000Z","formattedDate":"October 18, 2022","tags":[{"label":"v0.10.0","permalink":"/blog/tags/v-0-10-0"},{"label":"patch","permalink":"/blog/tags/patch"},{"label":"major","permalink":"/blog/tags/major"}],"readingTime":0.92,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.10.0","patch","major"],"sidebar_position":6,"date":"2022-10-18T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Bun Support and Continuous Testing (v0.12.0)","permalink":"/blog/v0.12.0"},"nextItem":{"title":"Improving Property Based Testing (v0.9.1)","permalink":"/blog/v0.9.1"}},"content":"Hey everyone!\\n\\nThis release is focused on providing some additional small quality of life improvements to the tool.\\n\\n## Better Snapshots\\n\\nPrior to this release, all snapshots were captured in a global `pineapple-snapshot`, and while this worked, I don\'t believe it made reviewing particularly effective.\\n\\nWhen snapshots are captured, it will now save in close proximity to your file that you\'re testing, appending a `.psnap` to the file name.\\n\\nSo if you were testing a `./src/math.js` file, the snapshot will be persisted to `./src/math.js.psnap`\\n\\n## More Hooks\\n\\nThis version introduces a few new hooks for test lifecycle management.\\n\\nYou may now use:\\n\\n- `@beforeGlobal`\\n- `@beforeEachGlobal`\\n- `@afterGlobal`\\n- `@afterEachGlobal`\\n\\nThese hooks were introduced to make it easier to pair Pineapple with measurement frameworks, where you might need to reset certain fields.\\n\\nRight now, the functions invoked do not receive any arguments, but this will likely be addressed in a future version.\\n\\n## Better Output\\n\\nIn certain cases, important error feedback was suppressed by the framework, thus making it difficult to rectify issues identified by the test. This feedback should no longer be suppressed."},{"id":"/v0.9.1","metadata":{"permalink":"/blog/v0.9.1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.9.1.md","source":"@site/blog/v0.9.1.md","title":"Improving Property Based Testing (v0.9.1)","description":"Hi all!","date":"2022-09-13T00:00:00.000Z","formattedDate":"September 13, 2022","tags":[{"label":"v0.9.1","permalink":"/blog/tags/v-0-9-1"},{"label":"patch","permalink":"/blog/tags/patch"},{"label":"minor","permalink":"/blog/tags/minor"}],"readingTime":1.6,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.9.1","patch","minor"],"sidebar_position":5,"date":"2022-09-13T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Improving Snapshots & User Output (v0.10.0)","permalink":"/blog/v0.10.0"},"nextItem":{"title":"Supercharging Pineapple with Property Based Testing (v0.9.0)","permalink":"/blog/v0.9.0"}},"content":"Hi all!\\n\\nThis release is focused on providing some small quality of life improvements to the property-based testing features within Pineapple.\\n\\nThere are two main additions to the technology:\\n\\n#### Namespaces\\n\\n```js\\n/**\\n * Creates the static values for use in various scenarios in our codebase.\\n * @pineapple_define friends\\n */\\nfunction define () {\\n  return {\\n    kevin: { /* ... */ },\\n    shane: { /* ... */ },\\n    emily: { /* ... */ }\\n  }\\n}\\n\\n/**\\n * #friends.emily, #friends.shane returns \'Battle won!\'\\n * #friends.shane, #friends.kevin returns \'Battle draw!\'\\n */\\nfunction fight (attacker, defender) {\\n  /* ... */\\n}\\n```\\n\\nNamespaces might make it simpler to set up various generators & static values that you might wish to use throughout your tests.\\n\\n#### Better Constant Detection\\n\\nWhen you set up definitions in Pineapple, the testing framework will do its best to try to keep track of whether your \\"arbitrary expression\\" is actually constant.\\n\\nThis prevents a bunch of duplicate tests from taking place, particularly when it would be annoying (like in snapshots).\\n\\nPreviously, when one would try the following:\\n\\n```js\\n/**\\n * @pineapple_define\\n */\\nfunction define () {\\n  return { age: 17 }\\n}\\n\\n/**\\n * @test { name: \'Kevin\', age: #age }\\n * The above would not be detected as static in v0.9.0,\\n * but will be in v0.9.1\\n */\\nfunction setupAccount({ name, age }) {\\n  /* ... */\\n}\\n\\n/**\\n * @test #age returns false\\n * The above will be detected as constant in both v0.9.0 and v0.9.1\\n */\\nfunction isAmericanDrinkingAge (age) {\\n  return age >= 21\\n}\\n```\\n\\nPineapple would not be able to detect that the expression `{ name: \'Kevin\', age: #age }` was actually a constant expression. However, if you used `#age`\\noutside of a structure as seen in the second example, it would work!\\n\\nTo make developer\'s lives easier, Pineapple has been improved to try to do a better job of detecting\\nconstant structures."},{"id":"/v0.9.0","metadata":{"permalink":"/blog/v0.9.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.9.0.md","source":"@site/blog/v0.9.0.md","title":"Supercharging Pineapple with Property Based Testing (v0.9.0)","description":"Hi all!","date":"2022-05-22T00:00:00.000Z","formattedDate":"May 22, 2022","tags":[{"label":"v0.9.0","permalink":"/blog/tags/v-0-9-0"},{"label":"patch","permalink":"/blog/tags/patch"},{"label":"fast-check","permalink":"/blog/tags/fast-check"},{"label":"major","permalink":"/blog/tags/major"}],"readingTime":2.21,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.9.0","patch","fast-check","major"],"sidebar_position":4,"date":"2022-05-22T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Improving Property Based Testing (v0.9.1)","permalink":"/blog/v0.9.1"},"nextItem":{"title":"Extending Interchange Formats & Subset Testing (v0.8.0)","permalink":"/blog/v0.8.0"}},"content":"Hi all!\\n\\nThis release is focused on introducing fuzzing / property based testing to the Pineapple framework, which should make it ridiculously easy to cover a variety of test cases with simple test expressions.\\n\\nUtilizing the amazing [fast-check](https://github.com/dubzzz/fast-check) npm package, Pineapple is now able to fuzz a handful of test-cases and shrink any counter-examples down to the smallest test-case it can find to trip an error.\\n\\nFor example:\\n\\n```js\\n\\n/**\\n * Using fuzz testing, this will cover a handful of scenarios,\\n * positives, negatives, zeroes\\n * Without you needing to go over each example explicitly.\\n * \\n * @test #integer, #integer returns @ as number\\n * @test #integer, #integer returns args.0 + args.1\\n * \\n * The above test is a little silly since it\'s embedding the   \\n * same logic in the test, but demonstrates that it\'s possible.\\n */\\nfunction add (a, b) {\\n    return a + b \\n}\\n\\n/**\\n * @test #array(#integer) returns @ as number\\n * @test #array(#string, { minLength: 1 }) throws\\n * @test [1, 2, 3] returns 6\\n * @test [#integer, 2, 3] returns args.0.0 + 5\\n * @test [] returns 0\\n */\\nexport function sum (values) {\\n  if (values.some(i => typeof i !== \'number\')) throw new Error(\'An item in the array is not a number.\')\\n  return values.reduce((a, b) => a + b, 0)\\n}\\n\\n/**\\n * @test { name: #string, age: #integer(1, 20) } throws\\n * @test { name: \'Jesse\', age: #integer(21, 80) } returns cat(args.0.name, \' is drinking age.\')\\n */\\nexport function drinkingAge ({ name, age }) {\\n  if (age >= 21) return `${name} is drinking age.`\\n  throw new Error(`${name} is not drinking age.`)\\n}\\n```\\n\\nThis works great for handling a variety of scenarios without having to write much code, and also works with the snapshot tech built into Pineapple (making it even easier to pin functionality for a handful of test-cases).\\n\\nWhen your tests fail though, Pineapple & Fast-Check will work together to help identify the issue.\\n\\n```js\\n/**\\n * A simple template function.\\n * @test \'Hello $0\' ~> #string returns cat(\'Hello \', args.0)\\n * @param {string} templateString\\n */\\nexport function template (templateString) {\\n  /** @param {string} replace */\\n  return replace => templateString.replace(/\\\\$0/g, replace)\\n}\\n```\\n\\n```\\n\u2716 Failed test (template): \'Hello $0\' ~> #string returns cat(\'Hello \', args.0)\\n>> file:///Users/jesse/Documents/Projects/pineapple/test/fuzz.js:35\\n- Expected\\n+ Received\\n\\n- Hello $$\\n+ Hello $\\nFailing Example: [\\n  \\"$$\\"\\n]\\nShrunk 4 times.\\nSeed: -2121637705\\n```\\n\\nFast-Check shrinks the test-case to help you as the developer realize: \\"Oh! The replace string needs escaped because the `$` character is special in the replace function.\\"\\n\\nIf you wish to read up more on the Fuzz Testing technology, [you may do so here](/docs/writing-tests/fuzzing-property-based)."},{"id":"/v0.8.0","metadata":{"permalink":"/blog/v0.8.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.8.0.md","source":"@site/blog/v0.8.0.md","title":"Extending Interchange Formats & Subset Testing (v0.8.0)","description":"Hello!","date":"2022-05-18T00:00:00.000Z","formattedDate":"May 18, 2022","tags":[{"label":"v0.8.0","permalink":"/blog/tags/v-0-8-0"},{"label":"patch","permalink":"/blog/tags/patch"},{"label":"major","permalink":"/blog/tags/major"}],"readingTime":0.93,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.8.0","patch","major"],"sidebar_position":4,"date":"2022-05-18T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Supercharging Pineapple with Property Based Testing (v0.9.0)","permalink":"/blog/v0.9.0"},"nextItem":{"title":"Improving Snapshots (v0.7.0)","permalink":"/blog/v0.7.0"}},"content":"Hello!\\n\\nThis patch introduces the ability to select your output format, which should help with editor integrations in the future.\\n\\nIf you use `OUTPUT_FORMAT=JSON` or `-f json`, you are able to have Pineapple output to an ndjson stream which should be more easily parsable by a program.\\n\\nFor reference:\\n\\n```\\n\u2714 Passed test (fib): 1\\n\u2714 Passed test (fib): 3\\n\u2714 Passed test (fib): 10\\n\u2714 Passed test (add): 1, 2\\n\u2714 Passed test (add): \'4\', 3 throws\\n\u2714 Passed test (add): 1, \'0\' throws\\n\u2714 Passed test (add): -1, 1\\n\u2714 Passed test (add): -1, 1 to 0\\n\u2716 Failed test (add): -1, 1 to -1\\n```\\n\\nWill become the following in JSON mode:\\n\\n```\\n{\\"type\\":\\"Success\\",\\"name\\":\\"fib\\",\\"input\\":\\"1\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:39\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"fib\\",\\"input\\":\\"3\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:40\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"fib\\",\\"input\\":\\"10\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:41\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"1, 2\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:2\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"\'4\', 3 throws\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:3\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"1, \'0\' throws\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:4\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"-1, 1\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:5\\"}\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"-1, 1 to 0\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:6\\"}\\n{\\"type\\":\\"Failure\\",\\"name\\":\\"add\\",\\"input\\":\\"-1, 1 to -1\\",\\"message\\":\\"- Expected\\\\n+ Received\\\\n\\\\n- -1\\\\n+ 0\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:7\\"\\n```\\n\\nThis release also introduces the ability to run a subset of tests using the `--only` flag.\\n\\nAdditionally, it adds the file name & line number to failed test output (even in pretty mode), which should make it easier to jump to your test cases."},{"id":"/v0.7.0","metadata":{"permalink":"/blog/v0.7.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.7.0.md","source":"@site/blog/v0.7.0.md","title":"Improving Snapshots (v0.7.0)","description":"Hi all!","date":"2022-05-17T00:00:00.000Z","formattedDate":"May 17, 2022","tags":[{"label":"v0.7.0","permalink":"/blog/tags/v-0-7-0"},{"label":"patch","permalink":"/blog/tags/patch"},{"label":"major","permalink":"/blog/tags/major"}],"readingTime":0.725,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.7.0","patch","major"],"sidebar_position":3,"date":"2022-05-17T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Extending Interchange Formats & Subset Testing (v0.8.0)","permalink":"/blog/v0.8.0"},"nextItem":{"title":"Introducing Class Tests (v0.6.3)","permalink":"/blog/v0.6.3"}},"content":"Hi all!\\n\\nThis minor patch improves the developer experience around snapshots by making the output readable (as opposed to the Jest Serialization mechanism that it used in previous versions).\\n\\n```json\\n{\\n  \\"fib(1) [dRX81e0Zt9zxfAdy4cKtrrKMfyO/nvL9WF+XRAOtEB0=]\\": {\\n    \\"value\\": 1,\\n    \\"async\\": false\\n  },\\n  \\"fib(3) [KTjgP0vq5dR61BJFF+PbmmL0idLvto8mYF5cAbndz5k=]\\": {\\n    \\"value\\": 2,\\n    \\"async\\": false\\n  },\\n  \\"fib(10) [RDou6nU/Mgg9Olsl1Kd1FGLxi1Ij/V+3bw0spgCqCnY=]\\": {\\n    \\"value\\": 55,\\n    \\"async\\": false\\n  },\\n  \\"add(1, 2) [O6M1izKkUUPb7fRhfnhMZ8VxO25LxM0bS6rw/tGm5YA=]\\": {\\n    \\"value\\": 3,\\n    \\"async\\": false\\n  },\\n  \\"add(-1, 1) [hnYzkbZiJjMD0YnEHZer8Pwyyf32Pd3dus2/O70SBZk=]\\": {\\n    \\"value\\": 0,\\n    \\"async\\": false\\n  },\\n  \\"mul(3, 5) [3uLRCxaVjev70tv9IFOlLrFQMM2wYWl0A1q5WwoopjE=]\\": {\\n    \\"value\\": 15,\\n    \\"async\\": false\\n  }\\n}\\n```\\n\\nThis should make it simpler to review snapshots for the purposes of pull-requests.\\n\\nThe syntax is json-like, in that it actually uses Pineapple\'s grammar & functions to parse it, which will make it easier to support things like dates & bigints, or other types of values later on.\\n\\n```json\\n{\\n    \\"addAsync(5n, 3n) [X76+w3gcfI4QVFELW0Sgv2OKYXurpbbu3cu+5ki2IfM=]\\": {\\n        \\"value\\": 8n,\\n        \\"async\\": true\\n    }\\n}\\n```"},{"id":"/v0.6.3","metadata":{"permalink":"/blog/v0.6.3","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.6.3.md","source":"@site/blog/v0.6.3.md","title":"Introducing Class Tests (v0.6.3)","description":"This patch introduces a small quality of life improvement, which I felt was particularly necessary after introducing class-based testing:","date":"2022-05-10T00:00:00.000Z","formattedDate":"May 10, 2022","tags":[{"label":"v0.6.3","permalink":"/blog/tags/v-0-6-3"},{"label":"patch","permalink":"/blog/tags/patch"}],"readingTime":0.96,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.6.3","patch"],"sidebar_position":2,"date":"2022-05-10T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Improving Snapshots (v0.7.0)","permalink":"/blog/v0.7.0"},"nextItem":{"title":"Introducing Pineapple","permalink":"/blog/introducing-pineapple"}},"content":"This patch introduces a small quality of life improvement, which I felt was particularly necessary after introducing class-based testing:\\n\\n**Multiline Test Cases!**\\n\\n```js\\n/**\\n * @test \'Jesse\', 24 \\n * ~> $.grow(3)\\n * ~> $.grow(2) returns 29\\n * \\n * @test \'Rick\', 62 \\n * ~> $.grow(1) returns 63\\n * ~> $.grow(2) returns 65\\n * ~> $.getName() returns \'Rick\'\\n * ~> $.grow() returns $.age === 66\\n */\\nexport class Person {\\n    constructor(name, age) {\\n        this.name = name\\n        this.age = age\\n    }\\n\\n    grow(amount = 1) {\\n        return this.age += amount\\n    }\\n\\n    getName() {\\n        return this.name\\n    }\\n}\\n```\\n\\nIf you write a test case on multiple lines, Pineapple will now automatically concatenate it to the test case. This is not exclusive to class / higher-order function syntax.\\n\\n```js\\n/**\\n * @test { \\n *      tenant: \'Rick\',\\n *      length: 10,\\n *      type: \'boat\' \\n * } resolves\\n * \\n * @test {\\n *      tenant: 10,\\n *      length: \'Rick\',\\n *      type: \'boat\'\\n * } rejects\\n */\\nexport async function createLease({ tenant, length, type = \'boat\' }) {\\n    if (typeof tenant !== \'string\' || typeof length !== \'number\') \\n        throw new Error(\'Types do not match.\')\\n    return { type, tenant, length }\\n}\\n```"},{"id":"/introducing-pineapple","metadata":{"permalink":"/blog/introducing-pineapple","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/introducing-pineapple.md","source":"@site/blog/introducing-pineapple.md","title":"Introducing Pineapple","description":"The Pineapple Logo","date":"2022-05-09T00:00:00.000Z","formattedDate":"May 9, 2022","tags":[{"label":"introduction","permalink":"/blog/tags/introduction"}],"readingTime":4.095,"hasTruncateMarker":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["introduction"],"sidebar_position":1,"date":"2022-05-09T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"Introducing Class Tests (v0.6.3)","permalink":"/blog/v0.6.3"}},"content":"![The Pineapple Logo](/img/pineapple.png)\\n\\n## What in the world is Pineapple?\\n\\nPineapple is a test framework designed to remove the cruft from writing unit tests and creating snapshots.\\n\\n```js\\n/**\\n * Adds numbers together for the sake of demonstrating pineapple.\\n * @test 1, 2 returns 3\\n * @test \'1\', 2 throws \\"Not a number\\"\\n * @param {number} a \\n * @param {number} b\\n */\\nexport function add(a, b) {\\n    if (typeof a !== \'number\' || typeof b !== \'number\') throw new Error(\'Not a number\')\\n    return a + b\\n}\\n```\\n\\nIt allows you to embed a few example test-cases in your JSDocs, making it easier to focus on your code and less on defining `it` & `expect` chains. \\n\\nWhen you omit conditions from your test cases, it\'ll automatically capture the result of your test & snapshot it, making it easier to preserve expected behavior in your applications, and even easier for users to find examples on how to call your code.\\n\\n![An example of the snapshot functionality where the code is modified and the snapshot fails due to a renamed attribute](/img/snapshot.gif)\\n\\n## But... why?\\n\\nWhile there are a lot of great test frameworks out there with solid communities and support, I\'ve found it difficult to introduce testing to certain teams due to the cruft & ergonomics involved.\\n\\nPineapple is an attempt to make it easier to write your tests, to get more people into the habit of writing them. The idea is that if it\'s simple (or at least less of a pain) to write a few test cases & also flesh out your documentation, more people will take the opportunity to write them.\\n\\n\\nWhile frameworks like Mocha are pretty nice, writing some checks idiomatically tends to lead to verbose test-cases. \\n\\n```js\\nconst { add } = require(\'../../modules/math\')\\n\\ndescribe(\'A description of your test suite\', () => {\\n    it(\'Should be able to add two numbers together\', () => {\\n        assert.equals(add(1, 2), 3)\\n    })\\n\\n    it(\'Should throw if one of the parameters is a string\', () => {\\n        expect(add(1, \'2\')).to.throw()\\n        expect(add(\'1\', 2)).to.throw()\\n        expect(add(\'1\', \'2\')).to.throw()\\n    })\\n\\n    it(\'should be able to add negative numbers\', () => {\\n        assert.equals(add(-3, 5), 2)\\n    })\\n})\\n```\\n\\nvs writing\\n```js\\n/**\\n * @test 1, 2 returns 3\\n * @test 1, \'2\' throws\\n * @test -3, 5 returns 2\\n */\\nfunction add(a, b) { ... }\\n```\\n\\nAnd sometimes the added verbosity is nice! But sometimes it\'d be a little easier to be able to get to the point & provide examples of how to call your functions.\\n\\nI also wanted to make it simple to perform snapshots, because in a handful of cases (particularly on functions with more complex types), I\'ve seen people run the functions & copy-paste the output into an expect clause.\\n\\n```js\\n// Snapshots by default if no conditions are specified :)\\n/**\\n * @test { name: \'Jesse\', term: \'8mo\' }\\n */\\nexport async function generateDocument({ name, term }) {\\n    return {\\n        name,\\n        term,\\n        lease: await acquireLease({ name, term })\\n    }\\n}\\n```\\n\\n## Got slightly more complex examples?\\n\\nIn some cases, you may want to set up a more complex test, these are the times that `.test.js` files are warranted in Pineapple.\\n\\nThis allows you to compose a handful of test cases on the same code, while remaining true to vanilla javascript. Ideally the tests that would be created would be a function that you might find in a real-world implementation of your APIs.\\n\\n```js\\n/**\\n * @test \\"HelloWorld\\"\\n * @test \\"Hello1\\" returns truthy\\n * @test \\"Hello\\" returns truthy\\n * @test \\"th1ng$Here\\" returns falsy\\n */\\nexport function commonRule (pw) {\\n    return password(\\n        min(8),\\n        max(16),\\n        hasDigits(1),\\n        hasSpecial(1),\\n        hasLowerCase(1),\\n        hasUpperCase(1)\\n    )(pw)\\n}\\n```\\n\\n\\n\\nPineapple can also be used to test classes, though if you get to a point where you\'re needing to compose numerous scenarios across multiple entities, it might be ideal to start exploring a Scenario Testing framework like Cucumber. :)\\n```js\\n/**\\n * A basic bank account class that allows for withdrawing & depositing money.\\n *\\n * @test 100 \\n * ~> $.withdraw(10) \\n * ~> $.deposit(20) returns $.balance === 110\\n * \\n * @test 0 \\n * ~> $.withdraw(100) throws \'Insufficient funds\'\\n * ~> $.deposit(50) returns 50\\n * ~> $.withdraw(20) returns 30\\n * \\n * @test 100 \\n * ~> $.withdraw(-10) throws \\n * ~> $.deposit(-10) throws\\n */\\n export class Account {\\n    constructor(balance) {\\n        this.balance = balance\\n    }\\n\\n    withdraw (amount) {\\n        if (amount < 0) throw new Error(\'Amount must be greater than zero\')\\n        if (this.balance < amount) throw new Error(\'Insufficient funds\')\\n        return this.balance -= amount\\n    }\\n\\n    deposit (amount) {\\n        if (amount < 0) throw new Error(\'Amount must be greater than zero\')\\n        return this.balance += amount\\n    }\\n}\\n```\\n\\nPineapple isn\'t meant to replace all forms of testing; just your basic unit tests & similar.\\n\\nAs of May 9th 2022, the project still has not had a v1.0 release, thus should still be considered experimental. There are still some edges to round out before a stable release, but the technology is functional. :)"}]}')}}]);