"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1516],{4477:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/v0.9.0","metadata":{"permalink":"/pineapple/blog/v0.9.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.9.0.md","source":"@site/blog/v0.9.0.md","title":"v0.9.0","description":"Hi all!","date":"2022-05-22T00:00:00.000Z","formattedDate":"May 22, 2022","tags":[{"label":"v0.9.0","permalink":"/pineapple/blog/tags/v-0-9-0"},{"label":"patch","permalink":"/pineapple/blog/tags/patch"},{"label":"fast-check","permalink":"/pineapple/blog/tags/fast-check"}],"readingTime":2.25,"truncated":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.9.0","patch","fast-check"],"sidebar_position":4,"date":"2022-05-22T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"nextItem":{"title":"v0.8.0","permalink":"/pineapple/blog/v0.8.0"}},"content":"# Supercharging Pineapple with Property Based Testing (v0.9.0)\\r\\n\\r\\nHi all!\\r\\n\\r\\nThis release is focused on introducing fuzzing / property based testing to the Pineapple framework, which should make it ridiculously easy to cover a variety of test cases with simple test expressions.\\r\\n\\r\\nUtilizing the amazing [fast-check](https://github.com/dubzzz/fast-check) npm package, Pineapple is now able to fuzz a handful of test-cases and shrink any counter-examples down to the smallest test-case it can find to trip an error.\\r\\n\\r\\nFor example:\\r\\n\\r\\n```js\\r\\n\\r\\n/**\\r\\n * Using fuzz testing, this will cover a handful of scenarios,\\r\\n * positives, negatives, zeroes\\r\\n * Without you needing to go over each example explicitly.\\r\\n * \\r\\n * @test #integer, #integer returns @ as number\\r\\n * @test #integer, #integer returns args.0 + args.1\\r\\n * \\r\\n * The above test is a little silly since it\'s embedding the   \\r\\n * same logic in the test, but demonstrates that it\'s possible.\\r\\n */\\r\\nfunction add (a, b) {\\r\\n    return a + b \\r\\n}\\r\\n\\r\\n/**\\r\\n * @test #array(#integer) returns @ as number\\r\\n * @test #array(#string, { minLength: 1 }) throws\\r\\n * @test [1, 2, 3] returns 6\\r\\n * @test [#integer, 2, 3] returns args.0.0 + 5\\r\\n * @test [] returns 0\\r\\n */\\r\\nexport function sum (values) {\\r\\n  if (values.some(i => typeof i !== \'number\')) throw new Error(\'An item in the array is not a number.\')\\r\\n  return values.reduce((a, b) => a + b, 0)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @test { name: #string, age: #integer(1, 20) } throws\\r\\n * @test { name: \'Jesse\', age: #integer(21, 80) } returns cat(args.0.name, \' is drinking age.\')\\r\\n */\\r\\nexport function drinkingAge ({ name, age }) {\\r\\n  if (age >= 21) return `${name} is drinking age.`\\r\\n  throw new Error(`${name} is not drinking age.`)\\r\\n}\\r\\n```\\r\\n\\r\\nThis works great for handling a variety of scenarios without having to write much code, and also works with the snapshot tech built into Pineapple (making it even easier to pin functionality for a handful of test-cases).\\r\\n\\r\\nWhen your tests fail though, Pineapple & Fast-Check will work together to help identify the issue.\\r\\n\\r\\n```js\\r\\n/**\\r\\n * A simple template function.\\r\\n * @test \'Hello $0\' ~> #string returns cat(\'Hello \', args.0)\\r\\n * @param {string} templateString\\r\\n */\\r\\nexport function template (templateString) {\\r\\n  /** @param {string} replace */\\r\\n  return replace => templateString.replace(/\\\\$0/g, replace)\\r\\n}\\r\\n```\\r\\n\\r\\n```\\r\\n\u2716 Failed test (template): \'Hello $0\' ~> #string returns cat(\'Hello \', args.0)\\r\\n>> file:///Users/jesse/Documents/Projects/pineapple/test/fuzz.js:35\\r\\n- Expected\\r\\n+ Received\\r\\n\\r\\n- Hello $$\\r\\n+ Hello $\\r\\nFailing Example: [\\r\\n  \\"$$\\"\\r\\n]\\r\\nShrunk 4 times.\\r\\nSeed: -2121637705\\r\\n```\\r\\n\\r\\nFast-Check shrinks the test-case to help you as the developer realize: \\"Oh! The replace string needs escaped because the `$` character is special in the replace function.\\"\\r\\n\\r\\nIf you wish to read up more on the Fuzz Testing technology, [you may do so here](/docs/writing-tests/fuzzing-property-based)."},{"id":"/v0.8.0","metadata":{"permalink":"/pineapple/blog/v0.8.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.8.0.md","source":"@site/blog/v0.8.0.md","title":"v0.8.0","description":"Hello!","date":"2022-05-18T00:00:00.000Z","formattedDate":"May 18, 2022","tags":[{"label":"v0.8.0","permalink":"/pineapple/blog/tags/v-0-8-0"},{"label":"patch","permalink":"/pineapple/blog/tags/patch"}],"readingTime":0.97,"truncated":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.8.0","patch"],"sidebar_position":4,"date":"2022-05-18T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"v0.9.0","permalink":"/pineapple/blog/v0.9.0"},"nextItem":{"title":"v0.7.0","permalink":"/pineapple/blog/v0.7.0"}},"content":"# Extending Interchange Formats & Subset Testing (v0.8.0)\\r\\n\\r\\nHello!\\r\\n\\r\\nThis patch introduces the ability to select your output format, which should help with editor integrations in the future.\\r\\n\\r\\nIf you use `OUTPUT_FORMAT=JSON` or `-f json`, you are able to have Pineapple output to an ndjson stream which should be more easily parsable by a program.\\r\\n\\r\\nFor reference:\\r\\n\\r\\n```\\r\\n\u2714 Passed test (fib): 1\\r\\n\u2714 Passed test (fib): 3\\r\\n\u2714 Passed test (fib): 10\\r\\n\u2714 Passed test (add): 1, 2\\r\\n\u2714 Passed test (add): \'4\', 3 throws\\r\\n\u2714 Passed test (add): 1, \'0\' throws\\r\\n\u2714 Passed test (add): -1, 1\\r\\n\u2714 Passed test (add): -1, 1 to 0\\r\\n\u2716 Failed test (add): -1, 1 to -1\\r\\n```\\r\\n\\r\\nWill become the following in JSON mode:\\r\\n\\r\\n```\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"fib\\",\\"input\\":\\"1\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:39\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"fib\\",\\"input\\":\\"3\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:40\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"fib\\",\\"input\\":\\"10\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:41\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"1, 2\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:2\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"\'4\', 3 throws\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:3\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"1, \'0\' throws\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:4\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"-1, 1\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:5\\"}\\r\\n{\\"type\\":\\"Success\\",\\"name\\":\\"add\\",\\"input\\":\\"-1, 1 to 0\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:6\\"}\\r\\n{\\"type\\":\\"Failure\\",\\"name\\":\\"add\\",\\"input\\":\\"-1, 1 to -1\\",\\"message\\":\\"- Expected\\\\n+ Received\\\\n\\\\n- -1\\\\n+ 0\\",\\"file\\":\\"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:7\\"\\r\\n```\\r\\n\\r\\nThis release also introduces the ability to run a subset of tests using the `--only` flag.\\r\\n\\r\\nAdditionally, it adds the file name & line number to failed test output (even in pretty mode), which should make it easier to jump to your test cases."},{"id":"/v0.7.0","metadata":{"permalink":"/pineapple/blog/v0.7.0","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.7.0.md","source":"@site/blog/v0.7.0.md","title":"v0.7.0","description":"Hi all!","date":"2022-05-17T00:00:00.000Z","formattedDate":"May 17, 2022","tags":[{"label":"v0.7.0","permalink":"/pineapple/blog/tags/v-0-7-0"},{"label":"patch","permalink":"/pineapple/blog/tags/patch"}],"readingTime":0.745,"truncated":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.7.0","patch"],"sidebar_position":3,"date":"2022-05-17T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"v0.8.0","permalink":"/pineapple/blog/v0.8.0"},"nextItem":{"title":"v0.6.3","permalink":"/pineapple/blog/v0.6.3"}},"content":"# Improving Snapshots (v0.7.0)\\r\\n\\r\\nHi all!\\r\\n\\r\\nThis minor patch improves the developer experience around snapshots by making the output readable (as opposed to the Jest Serialization mechanism that it used in previous versions).\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"fib(1) [dRX81e0Zt9zxfAdy4cKtrrKMfyO/nvL9WF+XRAOtEB0=]\\": {\\r\\n    \\"value\\": 1,\\r\\n    \\"async\\": false\\r\\n  },\\r\\n  \\"fib(3) [KTjgP0vq5dR61BJFF+PbmmL0idLvto8mYF5cAbndz5k=]\\": {\\r\\n    \\"value\\": 2,\\r\\n    \\"async\\": false\\r\\n  },\\r\\n  \\"fib(10) [RDou6nU/Mgg9Olsl1Kd1FGLxi1Ij/V+3bw0spgCqCnY=]\\": {\\r\\n    \\"value\\": 55,\\r\\n    \\"async\\": false\\r\\n  },\\r\\n  \\"add(1, 2) [O6M1izKkUUPb7fRhfnhMZ8VxO25LxM0bS6rw/tGm5YA=]\\": {\\r\\n    \\"value\\": 3,\\r\\n    \\"async\\": false\\r\\n  },\\r\\n  \\"add(-1, 1) [hnYzkbZiJjMD0YnEHZer8Pwyyf32Pd3dus2/O70SBZk=]\\": {\\r\\n    \\"value\\": 0,\\r\\n    \\"async\\": false\\r\\n  },\\r\\n  \\"mul(3, 5) [3uLRCxaVjev70tv9IFOlLrFQMM2wYWl0A1q5WwoopjE=]\\": {\\r\\n    \\"value\\": 15,\\r\\n    \\"async\\": false\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nThis should make it simpler to review snapshots for the purposes of pull-requests.\\r\\n\\r\\nThe syntax is json-like, in that it actually uses Pineapple\'s grammar & functions to parse it, which will make it easier to support things like dates & bigints, or other types of values later on.\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"addAsync(5n, 3n) [X76+w3gcfI4QVFELW0Sgv2OKYXurpbbu3cu+5ki2IfM=]\\": {\\r\\n        \\"value\\": 8n,\\r\\n        \\"async\\": true\\r\\n    }\\r\\n}\\r\\n```"},{"id":"/v0.6.3","metadata":{"permalink":"/pineapple/blog/v0.6.3","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/v0.6.3.md","source":"@site/blog/v0.6.3.md","title":"v0.6.3","description":"This patch introduces a small quality of life improvement, which I felt was particularly necessary after introducing class-based testing:","date":"2022-05-10T00:00:00.000Z","formattedDate":"May 10, 2022","tags":[{"label":"v0.6.3","permalink":"/pineapple/blog/tags/v-0-6-3"},{"label":"patch","permalink":"/pineapple/blog/tags/patch"}],"readingTime":0.985,"truncated":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["v0.6.3","patch"],"sidebar_position":2,"date":"2022-05-10T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"v0.7.0","permalink":"/pineapple/blog/v0.7.0"},"nextItem":{"title":"introducing-pineapple","permalink":"/pineapple/blog/introducing-pineapple"}},"content":"# Introducing Class Tests (v0.6.3)\\r\\n\\r\\nThis patch introduces a small quality of life improvement, which I felt was particularly necessary after introducing class-based testing:\\r\\n\\r\\n**Multiline Test Cases!**\\r\\n\\r\\n```js\\r\\n/**\\r\\n * @test \'Jesse\', 24 \\r\\n * ~> $.grow(3)\\r\\n * ~> $.grow(2) returns 29\\r\\n * \\r\\n * @test \'Rick\', 62 \\r\\n * ~> $.grow(1) returns 63\\r\\n * ~> $.grow(2) returns 65\\r\\n * ~> $.getName() returns \'Rick\'\\r\\n * ~> $.grow() returns $.age === 66\\r\\n */\\r\\nexport class Person {\\r\\n    constructor(name, age) {\\r\\n        this.name = name\\r\\n        this.age = age\\r\\n    }\\r\\n\\r\\n    grow(amount = 1) {\\r\\n        return this.age += amount\\r\\n    }\\r\\n\\r\\n    getName() {\\r\\n        return this.name\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nIf you write a test case on multiple lines, Pineapple will now automatically concatenate it to the test case. This is not exclusive to class / higher-order function syntax.\\r\\n\\r\\n```js\\r\\n/**\\r\\n * @test { \\r\\n *      tenant: \'Rick\',\\r\\n *      length: 10,\\r\\n *      type: \'boat\' \\r\\n * } resolves\\r\\n * \\r\\n * @test {\\r\\n *      tenant: 10,\\r\\n *      length: \'Rick\',\\r\\n *      type: \'boat\'\\r\\n * } rejects\\r\\n */\\r\\nexport async function createLease({ tenant, length, type = \'boat\' }) {\\r\\n    if (typeof tenant !== \'string\' || typeof length !== \'number\') \\r\\n        throw new Error(\'Types do not match.\')\\r\\n    return { type, tenant, length }\\r\\n}\\r\\n```"},{"id":"/introducing-pineapple","metadata":{"permalink":"/pineapple/blog/introducing-pineapple","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/introducing-pineapple.md","source":"@site/blog/introducing-pineapple.md","title":"introducing-pineapple","description":"The Pineapple Logo","date":"2022-05-09T00:00:00.000Z","formattedDate":"May 9, 2022","tags":[{"label":"introduction","permalink":"/pineapple/blog/tags/introduction"}],"readingTime":4.11,"truncated":false,"authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}],"frontMatter":{"tags":["introduction"],"sidebar_position":1,"date":"2022-05-09T00:00:00.000Z","authors":[{"name":"Jesse Mitchell","title":"Developer of Pineapple","url":"https://github.com/TotalTechGeek","image_url":"https://github.com/TotalTechGeek.png","imageURL":"https://github.com/TotalTechGeek.png"}]},"prevItem":{"title":"v0.6.3","permalink":"/pineapple/blog/v0.6.3"}},"content":"# Introducing Pineapple\\r\\n\\r\\n\\r\\n    ![The Pineapple Logo](/img/pineapple.png)\\r\\n\\r\\n## What in the world is Pineapple?\\r\\n\\r\\nPineapple is a test framework designed to remove the cruft from writing unit tests and creating snapshots.\\r\\n\\r\\n```js\\r\\n/**\\r\\n * Adds numbers together for the sake of demonstrating pineapple.\\r\\n * @test 1, 2 returns 3\\r\\n * @test \'1\', 2 throws \\"Not a number\\"\\r\\n * @param {number} a \\r\\n * @param {number} b\\r\\n */\\r\\nexport function add(a, b) {\\r\\n    if (typeof a !== \'number\' || typeof b !== \'number\') throw new Error(\'Not a number\')\\r\\n    return a + b\\r\\n}\\r\\n```\\r\\n\\r\\nIt allows you to embed a few example test-cases in your JSDocs, making it easier to focus on your code and less on defining `it` & `expect` chains. \\r\\n\\r\\nWhen you omit conditions from your test cases, it\'ll automatically capture the result of your test & snapshot it, making it easier to preserve expected behavior in your applications, and even easier for users to find examples on how to call your code.\\r\\n\\r\\n![An example of the snapshot functionality where the code is modified and the snapshot fails due to a renamed attribute](/img/snapshot.gif)\\r\\n\\r\\n## But... why?\\r\\n\\r\\nWhile there are a lot of great test frameworks out there with solid communities and support, I\'ve found it difficult to introduce testing to certain teams due to the cruft & ergonomics involved.\\r\\n\\r\\nPineapple is an attempt to make it easier to write your tests, to get more people into the habit of writing them. The idea is that if it\'s simple (or at least less of a pain) to write a few test cases & also flesh out your documentation, more people will take the opportunity to write them.\\r\\n\\r\\n\\r\\nWhile frameworks like Mocha are pretty nice, writing some checks idiomatically tends to lead to verbose test-cases. \\r\\n\\r\\n```js\\r\\nconst { add } = require(\'../../modules/math\')\\r\\n\\r\\ndescribe(\'A description of your test suite\', () => {\\r\\n    it(\'Should be able to add two numbers together\', () => {\\r\\n        assert.equals(add(1, 2), 3)\\r\\n    })\\r\\n\\r\\n    it(\'Should throw if one of the parameters is a string\', () => {\\r\\n        expect(add(1, \'2\')).to.throw()\\r\\n        expect(add(\'1\', 2)).to.throw()\\r\\n        expect(add(\'1\', \'2\')).to.throw()\\r\\n    })\\r\\n\\r\\n    it(\'should be able to add negative numbers\', () => {\\r\\n        assert.equals(add(-3, 5), 2)\\r\\n    })\\r\\n})\\r\\n```\\r\\n\\r\\nvs writing\\r\\n```js\\r\\n/**\\r\\n * @test 1, 2 returns 3\\r\\n * @test 1, \'2\' throws\\r\\n * @test -3, 5 returns 2\\r\\n */\\r\\nfunction add(a, b) { ... }\\r\\n```\\r\\n\\r\\nAnd sometimes the added verbosity is nice! But sometimes it\'d be a little easier to be able to get to the point & provide examples of how to call your functions.\\r\\n\\r\\nI also wanted to make it simple to perform snapshots, because in a handful of cases (particularly on functions with more complex types), I\'ve seen people run the functions & copy-paste the output into an expect clause.\\r\\n\\r\\n```js\\r\\n// Snapshots by default if no conditions are specified :)\\r\\n/**\\r\\n * @test { name: \'Jesse\', term: \'8mo\' }\\r\\n */\\r\\nexport async function generateDocument({ name, term }) {\\r\\n    return {\\r\\n        name,\\r\\n        term,\\r\\n        lease: await acquireLease({ name, term })\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Got slightly more complex examples?\\r\\n\\r\\nIn some cases, you may want to set up a more complex test, these are the times that `.test.js` files are warranted in Pineapple.\\r\\n\\r\\nThis allows you to compose a handful of test cases on the same code, while remaining true to vanilla javascript. Ideally the tests that would be created would be a function that you might find in a real-world implementation of your APIs.\\r\\n\\r\\n```js\\r\\n/**\\r\\n * @test \\"HelloWorld\\"\\r\\n * @test \\"Hello1\\" returns truthy\\r\\n * @test \\"Hello\\" returns truthy\\r\\n * @test \\"th1ng$Here\\" returns falsy\\r\\n */\\r\\nexport function commonRule (pw) {\\r\\n    return password(\\r\\n        min(8),\\r\\n        max(16),\\r\\n        hasDigits(1),\\r\\n        hasSpecial(1),\\r\\n        hasLowerCase(1),\\r\\n        hasUpperCase(1)\\r\\n    )(pw)\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nPineapple can also be used to test classes, though if you get to a point where you\'re needing to compose numerous scenarios across multiple entities, it might be ideal to start exploring a Scenario Testing framework like Cucumber. :)\\r\\n```js\\r\\n/**\\r\\n * A basic bank account class that allows for withdrawing & depositing money.\\r\\n *\\r\\n * @test 100 \\r\\n * ~> $.withdraw(10) \\r\\n * ~> $.deposit(20) returns $.balance === 110\\r\\n * \\r\\n * @test 0 \\r\\n * ~> $.withdraw(100) throws \'Insufficient funds\'\\r\\n * ~> $.deposit(50) returns 50\\r\\n * ~> $.withdraw(20) returns 30\\r\\n * \\r\\n * @test 100 \\r\\n * ~> $.withdraw(-10) throws \\r\\n * ~> $.deposit(-10) throws\\r\\n */\\r\\n export class Account {\\r\\n    constructor(balance) {\\r\\n        this.balance = balance\\r\\n    }\\r\\n\\r\\n    withdraw (amount) {\\r\\n        if (amount < 0) throw new Error(\'Amount must be greater than zero\')\\r\\n        if (this.balance < amount) throw new Error(\'Insufficient funds\')\\r\\n        return this.balance -= amount\\r\\n    }\\r\\n\\r\\n    deposit (amount) {\\r\\n        if (amount < 0) throw new Error(\'Amount must be greater than zero\')\\r\\n        return this.balance += amount\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nPineapple isn\'t meant to replace all forms of testing; just your basic unit tests & similar.\\r\\n\\r\\nAs of May 9th 2022, the project still has not had a v1.0 release, thus should still be considered experimental. There are still some edges to round out before a stable release, but the technology is functional. :)"}]}')}}]);