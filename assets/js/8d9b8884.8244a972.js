"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Introduction",s={unversionedId:"scenario-testing/introduction",id:"scenario-testing/introduction",title:"Introduction",description:"Introduced officially in v0.14.0, Pineapple now includes a simple Scenario testing framework to enable developers to write more advanced tests without pulling in another framework / taking a cumbersome approach.",source:"@site/docs/scenario-testing/introduction.md",sourceDirName:"scenario-testing",slug:"/scenario-testing/introduction",permalink:"/docs/scenario-testing/introduction",draft:!1,editUrl:"https://github.com/TotalTechGeek/pineapple/tree/master/website/docs/scenario-testing/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setup and Teardown",permalink:"/docs/writing-tests/setup-and-teardown"},next:{title:"Changes from Cucumber",permalink:"/docs/scenario-testing/differences"}},c={},l=[{value:"Writing a Scenario Test",id:"writing-a-scenario-test",level:2},{value:"Using Your Preferred Syntax",id:"using-your-preferred-syntax",level:2},{value:"Using the Fuzz &amp; Snapshot Technology",id:"using-the-fuzz--snapshot-technology",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Introduced officially in ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.14.0"),", Pineapple now includes a simple Scenario testing framework to enable developers to write more advanced tests without pulling in another framework / taking a cumbersome approach."),(0,a.kt)("p",null,"While we'd still encourage developers to consider pulling in Cucumber or a similar framework, Pineapple now has a lightweight setup to allow for comparable testing strategies."),(0,a.kt)("h2",{id:"writing-a-scenario-test"},"Writing a Scenario Test"),(0,a.kt)("p",null,"To write a Scenario Test in Pineapple, you may use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Steps")," utility."),(0,a.kt)("p",null,"By using this utility, you may specify the scope of the test (the ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," keyword to transfer data in between steps), as well as a namespace to prevent steps from being inherited by other Scenario Tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Inside of an account.test.ts file (though of course you can write it inside of a .js file)\nimport { Steps } from \'pineapple\'\nconst { Given, When, Then, Scenario } = Steps<{ account: BankAccount }>()\n\nGiven("a bank account with a balance of {balance}", function ({ balance }) {\n    this.account = new BankAccount(balance)\n})\n\nWhen("I deposit {amount}", function ({ amount }) {\n    this.account.deposit(amount)\n})\n\nThen("I should have a positive balance", function () {\n    // Preferably, use an assert framework here!\n    if (this.account.balance < 0) throw new Error(\'This should never occur!\')\n})\n\n/**\n * Define a simple scenario with the bank account, and provide some test cases:\n * @test { balance: 100, amount: 50 }\n * @test { balance: 30, amount: 190 }\n */\nexport const Example = Scenario`\nGiven a bank account with a balance of {balance}\nWhen I deposit {amount}\nThen I should have a positive balance`\n')),(0,a.kt)("h2",{id:"using-your-preferred-syntax"},"Using Your Preferred Syntax"),(0,a.kt)("p",null,"While Gherkin is a great scenario syntax, Pineapple does not strictly require it."),(0,a.kt)("p",null,"For example, if you'd rather implement user stories, the Steps framework allows you to do so."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Steps } from 'pineapple'\nimport { User } from './twitter'\nimport assert from 'assert'\n\nconst { As, I, Scenario } = Steps<{ user: User }>()\n\nAs(\"a user with a paid subscription\", function () {\n    this.user = new User('PaidPerson', true)\n})\n\nI(\"should have a blue checkmark\", function () {\n    assert.ok(this.user.hasCheckmark(), 'Checkmark not present')\n})\n\nI(\"would like to be able to edit a post\", async function () {\n    const post = await this.user.createPost('Unmodified Message')\n    await post.edit('Modified message')\n})\n\nAs(\"a user without a paid subscription\", function () {\n    this.user = new User('UnpaidPerson', false)\n})\n\nI(\"should not have a blue checkmark\", function () {\n    assert.ok(!this.user.hasCheckmark(), 'Checkmark present')\n})\n\nI(\"would like to see an error when I edit a post\", async function () {\n    const post = await this.user.createPost('Unmodified message')\n    await assert.rejects(post.edit('Modified Message'))\n})\n\n/**\n * @test {} resolves\n */\nexport const Paid = Scenario`\nAs a user with a paid subscription\nI should have a blue checkmark\nAnd would like to be able to edit a post`\n\n/**\n * @test {} resolves\n */\nexport const Unpaid = Scenario`\nAs a user without a paid subscription\nI should not have a blue checkmark\nAnd would like to see an error when I edit a post`\n")),(0,a.kt)("p",null,"While the author recommends a strong preference for a syntax like Gherkin (due to it having a stronger: Setup -> Action -> Confirm flow), it is possible for developers to choose whichever flow fits their project better."),(0,a.kt)("h2",{id:"using-the-fuzz--snapshot-technology"},"Using the Fuzz & Snapshot Technology"),(0,a.kt)("p",null,"What is interesting about using Pineapple as your scenario test runner is that you can leverage some of the strengths of both testing approaches."),(0,a.kt)("p",null,"For example, you could write:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Define a simple scenario with the bank account, and provide some test cases:\n * @test { balance: #integer, amount: #integer }\n */\nexport const Example = Scenario`\nGiven a bank account with a balance of {balance}\nWhen I deposit {amount}\nThen I should have a positive balance`\n")),(0,a.kt)("p",null,"Then one of the test cases it generates might correctly fail with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "error": "Amount must not be negative.",\n  "async": true,\n  "input": [\n    {\n      "balance": 5,\n      "amount": -3\n    }\n  ]\n}\nAccept this snapshot? Yes\n')),(0,a.kt)("p",null,"You are able to apply the Scenario Test steps to validate your passing cases (for the scenario), and the snapshot testing to capture (correctly) failing cases."))}p.isMDXComponent=!0}}]);