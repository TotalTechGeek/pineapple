"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[660],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return t?a.createElement(b,i(i({ref:n},u),{},{components:t})):a.createElement(b,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:2},i="Changes from Cucumber",c={unversionedId:"scenario-testing/differences",id:"scenario-testing/differences",title:"Changes from Cucumber",description:"Explanation",source:"@site/docs/scenario-testing/differences.md",sourceDirName:"scenario-testing",slug:"/scenario-testing/differences",permalink:"/docs/scenario-testing/differences",draft:!1,editUrl:"https://github.com/TotalTechGeek/pineapple/tree/master/website/docs/scenario-testing/differences.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/scenario-testing/introduction"},next:{title:"Data Tables",permalink:"/docs/scenario-testing/tables"}},s={},l=[{value:"Explanation",id:"explanation",level:2},{value:"Regex Match",id:"regex-match",level:2},{value:"Named Groups",id:"named-groups",level:3},{value:"Using Both Step &amp; Scenario Context",id:"using-both-step--scenario-context",level:3}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"changes-from-cucumber"},"Changes from Cucumber"),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("p",null,"In Cucumber.js, there is a special syntax for specifying how items are parsed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Cucumber.js style\nGiven("a bank account with a balance of {int}", function (balance) {\n    this.account = new BankAccount(balance)\n})\n')),(0,r.kt)("p",null,"Then in your scenarios, you'd write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Given a bank account with a balance of 200\n...\n")),(0,r.kt)("p",null,"The Cucumber library performs some parsing & regex matching against your steps to find matches."),(0,r.kt)("p",null,"By default, Pineapple does not opt for this approach. Instead, you are encouraged to think in templates from the beginning, and provide test cases to fill in the blanks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'Given("a bank account with a balance of {balance}", function ({ balance }) {\n    this.account = new BankAccount(balance)\n})\n\n/**\n * @test { balance: 200 }\n * @test { balance: 150 }\n */\n const Basic = Scenario`\n Given a bank account with a balance of {balance}`\n')),(0,r.kt)("p",null,"This allows the test framework to more easily recommend stubs to copy-paste in, as the template steps just directly match against the strings, no parsing magic necessary."),(0,r.kt)("h2",{id:"regex-match"},"Regex Match"),(0,r.kt)("p",null,"However, if you'd like to be able to re-use a step multiple times in the same scenario with different sets of data, Cucumber's approach can be more convenient."),(0,r.kt)("p",null,"Thus in Pineapple, you can provide a regex expression to the step definition similar to how you can in Cucumber (use groups to designate variables)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"When(/^I deposit (\\d+)$/, function (amount) {\n    this.account.deposit(amount)\n})\n\n/**\n * @test { balance: 200 }\n * @test { balance: 150 }\n */\n const Basic = Scenario`\n Given a bank account with a balance of {balance}\n When I deposit 50\n And I deposit 30`\n")),(0,r.kt)("h3",{id:"named-groups"},"Named Groups"),(0,r.kt)("p",null,"You are also able to use named groups in your regular expressions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"When(/^I deposit (?<amount>\\d+)$/, function ({ amount }) {\n    this.account.deposit(amount)\n})\n\n/**\n * @test { balance: 200 }\n * @test { balance: 150 }\n */\n const Basic = Scenario`\n Given a bank account with a balance of {balance}\n When I deposit 50\n And I deposit 30`\n")),(0,r.kt)("h3",{id:"using-both-step--scenario-context"},"Using Both Step & Scenario Context"),(0,r.kt)("p",null,"If you need access to both the step's context (parsed from the regular expression), and the context pulled from the scenario invocation, you may return a function from your regex step definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"When(/^I deposit (?<amount>\\d+) more than my original balance$/, function ({ amount }) {\n    return ({ balance }) => {\n        this.account.deposit(balance + amount)\n    }\n})\n\n/**\n * @test { balance: 200 }\n * @test { balance: 150 }\n */\n const Basic = Scenario`\n Given a bank account with a balance of {balance}\n When I deposit 50 more than my original balance`\n")),(0,r.kt)("p",null,"I expect this to be rare, though."))}p.isMDXComponent=!0}}]);