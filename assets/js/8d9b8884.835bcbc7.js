"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1},i="Introduction",s={unversionedId:"scenario-testing/introduction",id:"scenario-testing/introduction",title:"Introduction",description:"Introduced officially in v0.14.0, Pineapple now includes a simple Scenario testing framework to enable developers to write more advanced tests without pulling in another framework / taking a cumbersome approach.",source:"@site/docs/scenario-testing/introduction.md",sourceDirName:"scenario-testing",slug:"/scenario-testing/introduction",permalink:"/docs/scenario-testing/introduction",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scenario-testing/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setup and Teardown",permalink:"/docs/writing-tests/setup-and-teardown"},next:{title:"Output Format",permalink:"/docs/framework-documentation/output-format"}},c={},l=[{value:"Writing a Scenario Test",id:"writing-a-scenario-test",level:2},{value:"Using the Fuzz &amp; Snapshot Technology",id:"using-the-fuzz--snapshot-technology",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Introduced officially in ",(0,o.kt)("inlineCode",{parentName:"p"},"v0.14.0"),", Pineapple now includes a simple Scenario testing framework to enable developers to write more advanced tests without pulling in another framework / taking a cumbersome approach."),(0,o.kt)("p",null,"While we'd still encourage developers to consider pulling in Cucumber or a similar framework, Pineapple now has a lightweight setup to allow for comparable testing strategies."),(0,o.kt)("h2",{id:"writing-a-scenario-test"},"Writing a Scenario Test"),(0,o.kt)("p",null,"To write a Scenario Test in Pineapple, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Steps")," utility."),(0,o.kt)("p",null,"By using this utility, you may specify the scope of the test (the ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," keyword to transfer data in between steps), as well as a namespace to prevent steps from being inherited by other Scenario Tests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Inside of an account.test.ts file (though of course you can write it inside of a .js file)\nimport { Steps } from \'pineapple\'\nconst { Given, When, Then, Scenario } = Steps<{ account: BankAccount }>()\n\nGiven("a bank account with a balance of {balance}", function ({ balance }) {\n    this.account = new BankAccount(balance)\n})\n\nWhen("I deposit {amount}", function ({ amount }) {\n    this.account.deposit(amount)\n})\n\nThen("I should have a positive balance", function () {\n    // Preferably, use an assert framework here!\n    if (this.account.balance < 0) throw new Error(\'This should never occur!\')\n})\n\n/**\n * Define a simple scenario with the bank account, and provide some test cases:\n * @test { balance: 100, amount: 50 }\n * @test { balance: 30, amount: 190 }\n */\nexport const Example = Scenario`\nGiven a bank account with a balance of {balance}\nWhen I deposit {amount}\nThen I should have a positive balance`\n')),(0,o.kt)("h2",{id:"using-the-fuzz--snapshot-technology"},"Using the Fuzz & Snapshot Technology"),(0,o.kt)("p",null,"What is interesting about using Pineapple as your scenario test runner is that you can leverage some of the strengths of both testing approaches."),(0,o.kt)("p",null,"For example, you could write:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Define a simple scenario with the bank account, and provide some test cases:\n * @test { balance: #integer, amount: #integer }\n */\nexport const Example = Scenario`\nGiven a bank account with a balance of {balance}\nWhen I deposit {amount}\nThen I should have a positive balance`\n")),(0,o.kt)("p",null,"Then one of the test cases it generates might correctly fail with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "error": "Amount must not be negative.",\n  "async": true,\n  "input": [\n    {\n      "balance": 5,\n      "amount": -3\n    }\n  ]\n}\nAccept this snapshot? Yes\n')),(0,o.kt)("p",null,"You are able to apply the Scenario Test steps to validate your passing cases (for the scenario), and the snapshot testing to capture (correctly) failing cases."))}p.isMDXComponent=!0}}]);