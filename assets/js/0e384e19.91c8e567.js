"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Intro",l={unversionedId:"intro",id:"intro",title:"Intro",description:"What is this?",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/pineapple/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Continuous Testing",permalink:"/pineapple/docs/watch-mode"}},s={},p=[{value:"What is this?",id:"what-is-this",level:2},{value:"To Install",id:"to-install",level:2},{value:"To Run",id:"to-run",level:2},{value:"Example",id:"example",level:4}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intro"},"Intro"),(0,a.kt)("h2",{id:"what-is-this"},"What is this?"),(0,a.kt)("p",null,"Pineapple is a test framework designed to remove the cruft from writing unit tests and creating snapshots."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Adds numbers together for the sake of demonstrating pineapple.\n * @test 1, 2 returns 3\n * @test '1', 2 throws \"Not a number\"\n * @param {number} a \n * @param {number} b\n */\nexport function add(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') throw new Error('Not a number')\n    return a + b\n}\n")),(0,a.kt)("p",null,"Pineapple allows you to embed a few example test-cases in your JSDocs, making it easier to focus on your code and less on defining ",(0,a.kt)("inlineCode",{parentName:"p"},"it")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")," chains."),(0,a.kt)("p",null,"When you omit conditions from your test cases, Pineapple will automatically capture the result of your test & snapshot it, making it easier to preserve expected behavior in your applications, and even easier for users to find examples on how to call your code."),(0,a.kt)("img",{alt:"An example of the snapshot functionality where the code is modified and the snapshot fails due to a renamed attribute",src:"../img/snapshot.gif",width:"60%"}),(0,a.kt)("h2",{id:"to-install"},"To Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm i pineapple --save-dev\n")),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn add pineapple --dev\n")),(0,a.kt)("p",null,"Alternatively, you may install the runner globally (add a ",(0,a.kt)("inlineCode",{parentName:"p"},"-g")," flag)."),(0,a.kt)("h2",{id:"to-run"},"To Run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Usage: pineapple [options]\n\nOptions:\n  -V, --version             output the version number\n  -i, --include <files...>  Comma separated globs of files.\n  -w, --watch-mode          Will run tests only when a file is modified.\n  -a, --accept-all          Accept all snapshots.\n  -u, --update-all          Update all snapshots.\n  -t, --typescript          Enables typescript (slower).\n  --only <lines...>         Allows you to specify which tests you would like to\n                            run.\n  -f, --format <format>     The output format (choices: "json", "console",\n                            default: "console")\n  --bun                     Uses Bun as the test runner.\n  -h, --help                display help for command\n\n')),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pineapple -w -i "src/**/*.js" # Starts Pineapple in "watch mode" so that it\'ll run on update.\n')))}c.isMDXComponent=!0}}]);