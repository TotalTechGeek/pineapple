"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=s.createContext({}),l=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return s.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?s.createElement(f,i(i({ref:t},u),{},{components:n})):s.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8598:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1},i="Output Format",o={unversionedId:"framework-documentation/output-format",id:"framework-documentation/output-format",title:"Output Format",description:"Description",source:"@site/docs/framework-documentation/output-format.md",sourceDirName:"framework-documentation",slug:"/framework-documentation/output-format",permalink:"/pineapple/docs/framework-documentation/output-format",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/framework-documentation/output-format.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/pineapple/docs/scenario-testing/introduction"},next:{title:"Bun Support",permalink:"/pineapple/docs/bun-support"}},p={},l=[{value:"Description",id:"description",level:2},{value:"JSON Documentation",id:"json-documentation",level:2},{value:"Success",id:"success",level:3},{value:"Failure",id:"failure",level:3},{value:"Parse Failure",id:"parse-failure",level:3},{value:"Execution Failure",id:"execution-failure",level:3},{value:"Skipped Test",id:"skipped-test",level:3},{value:"Request Snapshot",id:"request-snapshot",level:3},{value:"Request Snapshot Update",id:"request-snapshot-update",level:3},{value:"Notes",id:"notes",level:2}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"output-format"},"Output Format"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,'By default, Pineapple will try to print the tests in a "pretty" format that makes it easy to for a developer to process the information in the terminal.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u2714 Passed test (fib): 1\n\u2714 Passed test (fib): 3\n\u2714 Passed test (fib): 10\n\u2714 Passed test (add): 1, 2\n\u2714 Passed test (add): '4', 3 throws\n\u2714 Passed test (add): 1, '0' throws\n\u2714 Passed test (add): -1, 1\n\u2714 Passed test (add): -1, 1 to 0\n\u2716 Failed test (add): -1, 1 to -1\n")),(0,a.kt)("p",null,"If, however, you instead use ",(0,a.kt)("inlineCode",{parentName:"p"},"-f json")," or environment variable ",(0,a.kt)("inlineCode",{parentName:"p"},"OUTPUT_FORMAT=JSON"),", you will instead get an NDJSON stream that will describe the tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{"type":"Success","name":"fib","input":"1","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:39"}\n{"type":"Success","name":"fib","input":"3","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:40"}\n{"type":"Success","name":"fib","input":"10","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:41"}\n{"type":"Success","name":"add","input":"1, 2","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:2"}\n{"type":"Success","name":"add","input":"\'4\', 3 throws","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:3"}\n{"type":"Success","name":"add","input":"1, \'0\' throws","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:4"}\n{"type":"Success","name":"add","input":"-1, 1","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:5"}\n{"type":"Success","name":"add","input":"-1, 1 to 0","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:6"}\n{"type":"Failure","name":"add","input":"-1, 1 to -1","message":"- Expected\\n+ Received\\n\\n- -1\\n+ 0","file":"file:///Users/jesse/Documents/Projects/pineapple/test/math.js:7"}\n')),(0,a.kt)("h2",{id:"json-documentation"},"JSON Documentation"),(0,a.kt)("h3",{id:"success"},"Success"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Success",\n  name: string, // the name of the function\n  input: string, // the test case being executed\n  file: string // the file path and line number\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case passes."),(0,a.kt)("h3",{id:"failure"},"Failure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Failure",\n  name: string, // the name of the function\n  input: string, // the test case being executed\n  message: string, // the reason that the test case failed.\n  file: string // the file path and line number\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case fails."),(0,a.kt)("h3",{id:"parse-failure"},"Parse Failure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Parse Failure",\n  name: string, // the name of the function\n  input: string, // the test case being executed\n  message: string, // the reason that the parsing failed.\n  file: string // the file path and line number\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case fails to parse."),(0,a.kt)("h3",{id:"execution-failure"},"Execution Failure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Runtime Failure",\n  name: string, // the name of the error\n  message: string // the error\'s message\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case fails to execute due to some sort of error within the test case execution itself."),(0,a.kt)("h3",{id:"skipped-test"},"Skipped Test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Test Skipped",\n  name: string, // the name of the function,\n  file: string // the file path and file number\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case is skipped due to it not being present."),(0,a.kt)("h3",{id:"request-snapshot"},"Request Snapshot"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Request Snapshot", \n  item: string, // the serialized data for the item\n  input: string, // the test case\n  id: string, // the id that the snapshot would be saved to\n  file: string // the file number and the line number\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case requests a snapshot to be created for the first time."),(0,a.kt)("h3",{id:"request-snapshot-update"},"Request Snapshot Update"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  type: "Request Snapshot Update", \n  old: string, // the serialized data for the old data in the snapshot\n  new: string, // the serialized data for the new data that could be snapshotted\n  input: string, // the test case\n  id: string, // the id that the snapshot would be saved to\n  file: string // the file number and the line number\n}\n')),(0,a.kt)("p",null,"This NDJSON is logged when a test case asks if a snapshot should be updated."),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("p",null,"If writing an IDE Integration, for writing / updating snapshots, you may wish to call pineapple with"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-a --only <file from json>"),", as this will force it to accept a snapshot for that test only."))}c.isMDXComponent=!0}}]);