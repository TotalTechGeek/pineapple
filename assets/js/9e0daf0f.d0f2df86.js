"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4284],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=p(n),h=a,m=g["".concat(l,".").concat(h)]||g[h]||u[h]||i;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},320:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={tags:["v0.9.0","patch","fast-check","major"],sidebar_position:4,date:new Date("2022-05-22T00:00:00.000Z"),authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png"}]},s="Supercharging Pineapple with Property Based Testing (v0.9.0)",o={permalink:"/blog/v0.9.0",editUrl:"https://github.com/TotalTechGeek/pineapple/tree/master/website/blog/v0.9.0.md",source:"@site/blog/v0.9.0.md",title:"Supercharging Pineapple with Property Based Testing (v0.9.0)",description:"Hi all!",date:"2022-05-22T00:00:00.000Z",formattedDate:"May 22, 2022",tags:[{label:"v0.9.0",permalink:"/blog/tags/v-0-9-0"},{label:"patch",permalink:"/blog/tags/patch"},{label:"fast-check",permalink:"/blog/tags/fast-check"},{label:"major",permalink:"/blog/tags/major"}],readingTime:2.21,hasTruncateMarker:!1,authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png",imageURL:"https://github.com/TotalTechGeek.png"}],frontMatter:{tags:["v0.9.0","patch","fast-check","major"],sidebar_position:4,date:"2022-05-22T00:00:00.000Z",authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png",imageURL:"https://github.com/TotalTechGeek.png"}]},prevItem:{title:"Improving Property Based Testing (v0.9.1)",permalink:"/blog/v0.9.1"},nextItem:{title:"Extending Interchange Formats & Subset Testing (v0.8.0)",permalink:"/blog/v0.8.0"}},l={authorsImageUrls:[void 0]},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Hi all!"),(0,a.kt)("p",null,"This release is focused on introducing fuzzing / property based testing to the Pineapple framework, which should make it ridiculously easy to cover a variety of test cases with simple test expressions."),(0,a.kt)("p",null,"Utilizing the amazing ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dubzzz/fast-check"},"fast-check")," npm package, Pineapple is now able to fuzz a handful of test-cases and shrink any counter-examples down to the smallest test-case it can find to trip an error."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"\n/**\n * Using fuzz testing, this will cover a handful of scenarios,\n * positives, negatives, zeroes\n * Without you needing to go over each example explicitly.\n * \n * @test #integer, #integer returns @ as number\n * @test #integer, #integer returns args.0 + args.1\n * \n * The above test is a little silly since it's embedding the   \n * same logic in the test, but demonstrates that it's possible.\n */\nfunction add (a, b) {\n    return a + b \n}\n\n/**\n * @test #array(#integer) returns @ as number\n * @test #array(#string, { minLength: 1 }) throws\n * @test [1, 2, 3] returns 6\n * @test [#integer, 2, 3] returns args.0.0 + 5\n * @test [] returns 0\n */\nexport function sum (values) {\n  if (values.some(i => typeof i !== 'number')) throw new Error('An item in the array is not a number.')\n  return values.reduce((a, b) => a + b, 0)\n}\n\n/**\n * @test { name: #string, age: #integer(1, 20) } throws\n * @test { name: 'Jesse', age: #integer(21, 80) } returns cat(args.0.name, ' is drinking age.')\n */\nexport function drinkingAge ({ name, age }) {\n  if (age >= 21) return `${name} is drinking age.`\n  throw new Error(`${name} is not drinking age.`)\n}\n")),(0,a.kt)("p",null,"This works great for handling a variety of scenarios without having to write much code, and also works with the snapshot tech built into Pineapple (making it even easier to pin functionality for a handful of test-cases)."),(0,a.kt)("p",null,"When your tests fail though, Pineapple & Fast-Check will work together to help identify the issue."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * A simple template function.\n * @test 'Hello $0' ~> #string returns cat('Hello ', args.0)\n * @param {string} templateString\n */\nexport function template (templateString) {\n  /** @param {string} replace */\n  return replace => templateString.replace(/\\$0/g, replace)\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u2716 Failed test (template): 'Hello $0' ~> #string returns cat('Hello ', args.0)\n>> file:///Users/jesse/Documents/Projects/pineapple/test/fuzz.js:35\n- Expected\n+ Received\n\n- Hello $$\n+ Hello $\nFailing Example: [\n  \"$$\"\n]\nShrunk 4 times.\nSeed: -2121637705\n")),(0,a.kt)("p",null,'Fast-Check shrinks the test-case to help you as the developer realize: "Oh! The replace string needs escaped because the ',(0,a.kt)("inlineCode",{parentName:"p"},"$"),' character is special in the replace function."'),(0,a.kt)("p",null,"If you wish to read up more on the Fuzz Testing technology, ",(0,a.kt)("a",{parentName:"p",href:"/docs/writing-tests/fuzzing-property-based"},"you may do so here"),"."))}u.isMDXComponent=!0}}]);