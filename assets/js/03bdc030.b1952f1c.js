"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=c(n),m=a,h=g["".concat(s,".").concat(m)]||g[m]||u[m]||o;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8761:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={tags:["v0.6.3","patch"],sidebar_position:2,date:new Date("2022-05-10T00:00:00.000Z"),authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png"}]},l="Introducing Class Tests (v0.6.3)",i={permalink:"/blog/v0.6.3",editUrl:"https://github.com/TotalTechGeek/pineapple/tree/master/website/blog/v0.6.3.md",source:"@site/blog/v0.6.3.md",title:"Introducing Class Tests (v0.6.3)",description:"This patch introduces a small quality of life improvement, which I felt was particularly necessary after introducing class-based testing:",date:"2022-05-10T00:00:00.000Z",formattedDate:"May 10, 2022",tags:[{label:"v0.6.3",permalink:"/blog/tags/v-0-6-3"},{label:"patch",permalink:"/blog/tags/patch"}],readingTime:.96,hasTruncateMarker:!1,authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png",imageURL:"https://github.com/TotalTechGeek.png"}],frontMatter:{tags:["v0.6.3","patch"],sidebar_position:2,date:"2022-05-10T00:00:00.000Z",authors:[{name:"Jesse Mitchell",title:"Developer of Pineapple",url:"https://github.com/TotalTechGeek",image_url:"https://github.com/TotalTechGeek.png",imageURL:"https://github.com/TotalTechGeek.png"}]},prevItem:{title:"Improving Snapshots (v0.7.0)",permalink:"/blog/v0.7.0"},nextItem:{title:"Introducing Pineapple",permalink:"/blog/introducing-pineapple"}},s={authorsImageUrls:[void 0]},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This patch introduces a small quality of life improvement, which I felt was particularly necessary after introducing class-based testing:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Multiline Test Cases!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @test 'Jesse', 24 \n * ~> $.grow(3)\n * ~> $.grow(2) returns 29\n * \n * @test 'Rick', 62 \n * ~> $.grow(1) returns 63\n * ~> $.grow(2) returns 65\n * ~> $.getName() returns 'Rick'\n * ~> $.grow() returns $.age === 66\n */\nexport class Person {\n    constructor(name, age) {\n        this.name = name\n        this.age = age\n    }\n\n    grow(amount = 1) {\n        return this.age += amount\n    }\n\n    getName() {\n        return this.name\n    }\n}\n")),(0,a.kt)("p",null,"If you write a test case on multiple lines, Pineapple will now automatically concatenate it to the test case. This is not exclusive to class / higher-order function syntax."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @test { \n *      tenant: 'Rick',\n *      length: 10,\n *      type: 'boat' \n * } resolves\n * \n * @test {\n *      tenant: 10,\n *      length: 'Rick',\n *      type: 'boat'\n * } rejects\n */\nexport async function createLease({ tenant, length, type = 'boat' }) {\n    if (typeof tenant !== 'string' || typeof length !== 'number') \n        throw new Error('Types do not match.')\n    return { type, tenant, length }\n}\n")))}u.isMDXComponent=!0}}]);